Linux 小知识
-------------------
pwd				查看当前文件夹的绝对路径

$ pwd
/d/GitDemo/gitDec
-------------------------------------------------
ls  			只列出文件名或者目录名

$ ls
notes.txt
-------------------------------------------------
ll = ls -l		列出文件的详细结果，日期，可读性

$ ll
total 0
-rw-r--r-- 1 hp 197121 0 Dec 15 00:26 notes.txt
-------------------------------------------------
ll -lA  		注意是大写的A，查看所有目录和文件，包括隐藏的

$ ll -lA
total 4
drwxr-xr-x 1 hp 197121 0 Dec 14 23:42 .git/
-rw-r--r-- 1 hp 197121 0 Dec 15 00:26 notes.txt
-------------------------------------------------
cat 文件名		查看文件内容，可以根据参数不同设置查看方式

1).一次显示整个文件:cat filename

2).从键盘创建一个文件:cat > filename 只能创建新文件,不能编辑已有文件.

3).将几个文件合并为一个文件:cat file1 file2 > file

$ cat .git/config
[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
[gui]
        wmstate = normal
        geometry = 1034x563+183+146 216 255
[user]
        name = clark_pro
        email = clark1991@github.com

以上是查看保存在config里面的内容，签名信息就保存在此文件中


-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------
-------------------------------------------------

----Vim 编辑器小知识----
1.：set nu
显示行数

2.直接按i键 进入 insert模式

3.按esc键退出编辑模式

4.：wq
保存并退出





Git相关(本地库)
---------------------------------------------------------

git init 初始化本地库

$ git init
Initialized empty Git repository in D:/GitDemo/gitDec2/.git/

init后，.git文件中以下隐藏文件


$ ll .git
total 3
-rw-r--r-- 1 hp 197121 130 Dec 14 23:42 config
-rw-r--r-- 1 hp 197121  73 Dec 14 23:42 description
-rw-r--r-- 1 hp 197121  23 Dec 14 23:42 HEAD
drwxr-xr-x 1 hp 197121   0 Dec 14 23:42 hooks/
drwxr-xr-x 1 hp 197121   0 Dec 14 23:42 info/
drwxr-xr-x 1 hp 197121   0 Dec 14 23:42 objects/
drwxr-xr-x 1 hp 197121   0 Dec 14 23:42 refs/

--设置签名--

用户名 :clark
Email :example@github.com
作用  :区分不同开发人员的身份
辨析  :这里设置的签名和登录远程库(代码托管中心)的账号或者密码没有任何关系
用户优先级：
	1. 项目级别/仓库级别： 尽在当前本地库有效
		git config user.name clark_pro
		git config user.email clark1991@github.com

		----签名信息保存的位置：./.git/config 文件

		$ cat .git/config
		[core]
		        repositoryformatversion = 0
		        filemode = false
		        bare = false
		        logallrefupdates = true
		        symlinks = false
		        ignorecase = true
		[gui]
		        wmstate = normal
		        geometry = 1034x563+183+146 216 255
		[user]
		        name = clark_pro
		        email = clark1991@github.com

	2. 系统用户级别，当前操作系统的用户权限范围
		git config --global user.name lucy_glb
		git config --global user.email lucy_glb@github.com

		----签名保存在系统用户的文件列表下，可以用cd ~ 跳转过去再查看
		----~/.gitconfig 在这个文件中保存的有系统级用户的信息

		hp@hp-PC MINGW64 ~
		$ cat .gitconfig
		[user]
		        name = lucy_glb
		        email = lucy_glb@github.com
		[filter "lfs"]
		        required = true
		        clean = git-lfs clean -- %f
		        smudge = git-lfs smudge -- %f
		        process = git-lfs filter-process


用户级别优先级
1.就近原则：项目级别优先于系统用户级别，二者都有时时，项目级别的签名权限比较大
		   项目界别.gitignore > 全局.gitignore
2.如果只有系统用户级别的签名，就以系统用户级别的签名为准
3.不允许既不是系统级，又不是项目级的设置



----具体怎么用git操作----

1. 查看状态
git status			查看当前repository的状态

$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

---no commits yet--- 	本地库没有任何的提交的东西
---nothing to commit---	缓存区中也没有什么可以提交的东西


2. 添加文件到缓存区
git add 文件名

$ git add notes.txt

$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   notes.txt

3. 如果想从缓存区中取出保存的文件，就如上文提示的用以下命令

$ git rm --cached notes.txt

---notes.txt文件就从缓存区取出来了，再调用git status就会显示和1.中一样的内容

4.git commit notes.txt
进入输入提交消息的界面，保存并退出后，会出现以下信息

$ git commit notes.txt
[master (root-commit) 603692b] This is the first time for commiting a file. File name is notes.txt Why                the background colour of this line is read. The colour font of this line is different from above line               . This line's colour is the same with line 3. Colour does not    changes.
 1 file changed, 89 insertions(+)
 create mode 100644 notes.txt

5.git commit -a notes.txt
 直接做提交的操作，不用先加到缓存区了

6.git commit -m "提交信息的注释，用-m这个参数就可以不进入Vim，直接提交注释，比较方便" notes.txt

7.git log 
查看版本状态

$ git log
commit 56feed95db947f80bb626b2edc30f070c05a3287 (HEAD -> master)
Author: clark_pro <clark1991@github.com>
Date:   Sun Jan 6 12:43:36 2019 +1100

    This is the second commit, modify notes.txt file and test -m parameter

commit 603692bdb7086b5e5fa4b322aa3714c15fe75996
Author: clark_pro <clark1991@github.com>
Date:   Sun Jan 6 12:26:41 2019 +1100

    This is the first time for commiting a file. File name is notes.txt
    Why the background colour of this line is read.
    The colour font of this line is different from above line.
    This line's colour is the same with line 3.
    Colour does not  changes.

以上有两个版本

---------------------
多屏显示控制方式：	|
空格向下翻页			|
b 向上翻页			|
q 退出				|
---------------------

可以根据修改参数来显示log的信息
	1).git log --pretty=oneline
		只显示一行

		$ git log --pretty=oneline
		d85ee4523194189a226953a79d024485065f4fa4 (HEAD -> master) This is the Thired time commit, git log command de                                                   scription was added, for testing version control
		56feed95db947f80bb626b2edc30f070c05a3287 This is the second commit, modify notes.txt file and test -m parame                                                   ter
		603692bdb7086b5e5fa4b322aa3714c15fe75996 This is the first time for commiting a file. File name is notes.txt                                                    Why the background colour of this line is read. The colour font of this line is different from above line.                                                    This line's colour is the same with line 3. Colour does not      changes.

	2).git log --oneline
		只显示一行，并且hash值是缩写

		$ git log --oneline
		d85ee45 (HEAD -> master) This is the Thired time commit, git log command description was added, for testing                                                    version control
		56feed9 This is the second commit, modify notes.txt file and test -m parameter
		603692b This is the first time for commiting a file. File name is notes.txt Why the background colour of thi                                                   s line is read. The colour font of this line is different from above line. This line's colour is the same wi                                                   th line 3. Colour does not       changes.

	3).git reflog
		显示当前版本的副本，和怎样移动HEAD指针

		$ git reflog
		d85ee45 (HEAD -> master) HEAD@{0}: reset: moving to d85ee45
		56feed9 HEAD@{1}: reset: moving to 56feed9
		56feed9 HEAD@{2}: reset: moving to 56feed9
		d85ee45 (HEAD -> master) HEAD@{3}: commit: This is the Thired time commit, git log command description was added, for testing version control
		56feed9 HEAD@{4}: commit: This is the second commit, modify notes.txt file and test -m parameter
		603692b HEAD@{5}: commit (initial): This is the first time for commiting a file. File name is notes.txt


8.版本的后退 git reset

	1).基于索引值操作[推荐]
		git reset --hard [局部索引值]
		git reset --hard d85ee45
	2).使用^符号：只能后退
		git reset --hard HEAD^
		注：一个^表示后退一步，n 个表示后退n 步
	3).使用~符号：只能后退
		git reset --hard HEAD~n
		注：表示后退n 步

	---参数对比, 可以git help reset查看

	1).git reset --soft 
	  仅仅在本地库移动HEAD指针,不动缓存区和工作区
	  Does not touch the index file or the working tree at all

	2).git reset --mixed
	  在本地库移动HEAD指针，并且重置缓存区
	  Resets the index but not the working tree

	3).git reset --hard
	  在本地库移动HEAD指针,重置缓存区和工作区
      Resets the index and working tree


9.比较文件的差异  
	1).git diff [文件名]
	  将工作区中的文件和缓存区进行比较
	
	2).git diff [本地库中历史版本--此处是索引值，hash值；或者用HEAD^] [文件名]
	  将工作区中的文件和本地库历史记录比较
	
	3).git diff 
	  即不带文件名，则比较所有文件


----Git分支管理----

1.分支(branch)的好处
  1).同时并行推进多个功能开发，提高开发效率
  2).各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。
     失败的分支删除重新开始即可。

2.命令
  1).创建分支
	git branch [分支名]

  2).查看分支
	git branch -v
	$ git branch -v
	* master 82061d3 This is the final version on 7th of 2019, notes ends with version reverse. total 270 lines.

	如果有多个分支，那么当前所在的分支为绿色，并且前面有个星星


  3).切换分支
	git checkout [分支名]

  4).合并分支(merge)，有两个步骤
  	第一步：切换到原来的分支上，通常是主分支
  		   git chekout [被合并的分支名]

  	第二步：执行merge命令，进行分支合并
    	   git merge [有新内容的分支名]

3.冲突处理
  即，当有多人对统一行代码做修改时，会出现冲突

  通常状态下，git的提示栏状态如下
  hp@hp-PC MINGW64 /d/GitDemo/gitDec (master)
  冲突状态下会变成
  hp@hp-PC MINGW64 /d/GitDemo/gitDec (master|MERGING)

  上述括号中表示的是，master和某个分支合并的时候，自动合并失败了，所以现在正在解决中

  通常冲突的文件会标识成一下状态
  <<<<<<< HEAD
  ksdajf;lkjsdakl;f
  =======
  askdjflkasdjf
  >>>>>>> master

  HEAD 到等号的位置是当前分支内容，
  等号到下面的>>>>>>>的位置表示另一个分支的内容


  冲突的解决
	第一步：编辑文件，删除特殊符号
	第二步：把文件修改到满意的程度，保存退出
	第三步：git add [文件名]
	第四步：git commit -m "日志信息"
	注意：此时commit 一定不能带文件名

----分支管理----

说明，Git的hash函数用的是SHA算法，并不是通用的MD5



